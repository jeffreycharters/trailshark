package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/jeffreycharters/trailshark/backsy/ent"
	"github.com/jeffreycharters/trailshark/backsy/ent/user"
	"github.com/jeffreycharters/trailshark/backsy/pkg/ulid"
	"golang.org/x/exp/slog"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input NewUserInput) (*ent.User, error) {
	emailExists, err := r.DB.User.Query().
		Where(
			user.Email(input.Email),
		).Exist(ctx)
	if ent.MaskNotFound(err) != nil {
		slog.Error("error querying email existence", "error", err.Error())
		return nil, fmt.Errorf("internal server error")
	}

	if emailExists {
		return nil, fmt.Errorf("email already exists")
	}

	usernameExists, err := r.DB.User.Query().
		Where(user.UsernameEqualFold(input.Username)).Exist(ctx)
	if ent.MaskNotFound(err) != nil {
		slog.Error("error querying users", "error", err.Error())
		return nil, fmt.Errorf("internal server error")
	}

	if usernameExists {
		return nil, fmt.Errorf("username already exists")
	}

	user, err := r.DB.User.Create().
		SetEmail(input.Email).
		SetUsername(input.Username).
		Save(ctx)

	if err != nil {
		slog.Error("error creating user", "error", err.Error())
		return nil, fmt.Errorf("internal server error")
	}

	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id ulid.ID) (*ent.User, error) {
	return r.DB.User.Get(ctx, id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.DB.User.Query().All(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
